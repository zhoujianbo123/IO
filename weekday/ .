#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <sys/shm.h>

#define  READ  0
#define  WRITE 1

#define  SIZE  1024
#define  N     1024

union semun {
	int              val;    /* Value for SETVAL */
	struct semid_ds *buf;    /* Buffer for IPC_STAT, IPC_SET */
	unsigned short  *array;  /* Array for GETALL, SETALL */
	struct seminfo  *__buf;  /* Buffer for IPC_INFO
								(Linux-specific) */
};

/*初始化信号灯，n表示要初始化信号灯个数*/
int init_sem(int semid, int array[] , int n )
{
	union semun myun;
	int i = 0;

	for(i = 0; i < n; i++)
	{
		myun.val = array[i];
		if(semctl(semid, i, SETVAL, myun) < 0)
		{
			perror("fail to semctl");
			exit(1);
		}
	}
	return 0;
}
/*申请资源*/
int sem_p(int semid, int num)
{
	struct sembuf buf;
	buf.sem_num = num;  //信号灯的编号
	buf.sem_op = -1;   //申请操作
	buf.sem_flg = 0;   //阻塞

	if(semop(semid, &buf, 1) < 0)
	{
		perror("fail to semop");
		exit(1);
	}

	return 0;
}
/*释放资源*/
int sem_v(int semid, int num)
{
	struct sembuf buf;
	buf.sem_num = num;
	buf.sem_op = 1;  //释放资源
	buf.sem_flg = IPC_NOWAIT;  //不阻塞

	if(semop(semid, &buf, 1) < 0)
	{
		perror("fail to sem_op");
		exit(1);
	}

	return 0;
}

int main(int argc, const char *argv[])
{
	key_t key;
	int semid;
	int shmid;
	char buf[N] = {0};
	int array[2] = {0, 1};
	char *shmaddr;

	if((key = ftok(".", 's')) < 0)
	{
		perror("fail to ftok");
		exit(1);
	}
	if((semid = semget(key, 2, IPC_CREAT|0664)) < 0)
	{
		perror("fail to semget");
		exit(1);
	}
	if((shmid = shmget(key, SIZE, IPC_CREAT|0664)) < 0)
	{
		perror("fail to shmget");
		exit(1);
	}
	if((shmaddr = (char*)shmat(shmid, NULL, 0)) ==(char*)-1 )
	{
		perror("fail to shmaddr");
		exit(1);
	}

	init_sem(semid,array, 2);

	while(1)
	{
		sem_p(semid, WRITE);  //申请写资源
		printf("Input >");
		fgets(buf, N, stdin);
		strcpy(shmaddr, buf);
		sem_v(semid, READ); //释放读资源

		if(strncmp(buf, "quit", 4) == 0)
		{
			break;
		}

	}
	
	if(semctl(semid, READ, IPC_RMID) < 0)
	{
		perror("fail to semctl");
		exit(1);
	}
	if(shmdt(shmaddr) < 0)
	{
		perror("fail to shmdt");
		exit(1);
	}
	if(shmctl(shmid, IPC_RMID, NULL) < 0)
	{
		perror("fail to shmctl");
		exit(1);
	}


	
	return 0;
}
